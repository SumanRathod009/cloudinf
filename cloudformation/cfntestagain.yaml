name: Publish Lambdas

# lambda-build.yml overview:
#
# Github Actions event listener for PR comments. L23 declares comment content to trigger workflow
#  Comment Format:
#  build <build directory> <buckets space separated>
#
#  Ex of PR comment:
#  build awslambda/asg_ebs_attach bucket1 bucket2
#
#  above will build the lambda bundle for asg_ebs_attach and publish it to bucket{1,2}

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]

jobs:
  
  pr_load:
    # if comment string starts with "build"
    # event must be a pull request (not a regular issue)
    name: Obtain PR information
    if: >
      startsWith(github.event.comment.body, 'build')
      && ( startsWith(github.event.issue.pull_request.url, 'https://') || startsWith(github.event.pull_request.url, 'https://') )
    outputs: 
      pr_branch: ${{ steps.load-pr.outputs.branch }}
      pr_base: ${{ steps.load-pr.outputs.base }}
      build_dir: ${{ steps.load-pr.outputs.build_dir }}
      buckets: ${{ steps.load-pr.outputs.buckets }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
      - name: Standardize the comment
        id: standardize
        uses: ./.github/actions/standardize_pr_comment
      - name: Load PR Details
        id: load-pr
        run: |
          set -eu
          resp=$(curl -sSf --url ${{ steps.standardize.outputs.url }} --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}'  --header 'content-type: application/json')
          
          branch=$(python3 -c "import sys, json; print(json.load(sys.stdin)['head']['ref'])" <<< "$resp")
          base=$(python3 -c "import sys, json; print(json.load(sys.stdin)['base']['ref'])" <<< "$resp")
          build_dir=$(cut -sd ' ' -f 2 <<< "${{ steps.standardize.outputs.comment }}")
          buckets=$(cut -sd ' ' -f 3- <<< "${{ steps.standardize.outputs.comment }}")
          
          echo "::set-output name=build_dir::$build_dir"
          echo "::set-output name=buckets::$buckets"
          echo "::set-output name=branch::$branch"
          echo "::set-output name=base::$base"
  
  build:
    needs: [pr_load]
    runs-on: ubuntu-latest
    container:
    #TODO: script can accept ruby code but here we assume python
      image: lambci/lambda:build-python3.8@sha256:4970860a3d81c5b0b0c0a045fafe87e1c228bdf72b068a2f96bbd4617b5da73f

    steps:
    - name: 'Checkout from PR Branch'
      uses: actions/checkout@v2
      with:
        ref: ${{ needs.pr_load.outputs.pr_branch }}
        token: ${{ secrets.REPO_PAT }}
        persist-credentials: true
    - name: Install jq
      run: yum install -y jq

    - name: 'Run lambda-build.sh and Publish'
      id: publish
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.ACTIONS_AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.ACTIONS_AWS_SECRET_ACCESS_KEY }}
        S3_BUCKETS: ${{ needs.pr_load.outputs.buckets }}
        BUILDDIR: ${{ needs.pr_load.outputs.build_dir }}
        BASE_BRANCH: ${{ needs.pr_load.outputs.pr_base }}
        PR_BRANCH: ${{ needs.pr_load.outputs.pr_branch }}
      run: |
        if [ "$BUILDDIR" = "auto" ]; then
          git fetch --unshallow origin $BASE_BRANCH $GITHUB_HEAD_REF $PR_BRANCH # Allows us to compare changes from the master branch
          base_sha=$(git merge-base "origin/${BASE_BRANCH}" HEAD)
          base_args=(-b "${base_sha}")
        fi
        export JQ_PATH="$(which jq)"
        set +e
        output=$(bash scripts/lambda-build.sh "${base_args[@]}" -y build ${BUILDDIR} ${S3_BUCKETS})
        exit_code=$?
        set -e
        output="$(bash scripts/action-output.sh <<< "$output")"
        echo "::set-output name=output::$output"
        echo "::set-output name=exit_code::$exit_code"

    - name: Comment back to PR with results 
      uses: actions/github-script@v2
      env:
        output: ${{ steps.publish.outputs.output }}
      with:
        github-token: ${{ secrets.FOE_PAT }}
        script: |
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: process.env.output
          })

    - name: Propagate script failure to workflow
      env:
        exit_code: ${{ steps.publish.outputs.exit_code }}
      run: |
        exit "$exit_code"
